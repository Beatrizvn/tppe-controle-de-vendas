// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customers  Customer[]
  suppliers  Supplier[]
  products   Product[]
  sales      Sale[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  sales Sale[]
}

model Supplier {
  id          Int      @id @default(autoincrement())
  companyName String
  cnpj        String   @unique
  email       String?  @unique
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  salePrice   Decimal
  costPrice   Decimal
  category    String
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  soldItems SoldItem[]
}

model Sale {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  soldItems SoldItem[]
  payment   Payment?
}

model SoldItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  unitPrice Decimal

  saleId    Int
  sale      Sale    @relation(fields: [saleId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@unique([saleId, productId])
}

enum PaymentType {
  UPFRONT
  INSTALLMENT
}

model Payment {
  id              Int         @id @default(autoincrement())
  status          String
  date            DateTime    @default(now())
  type            PaymentType
  discount        Decimal?
  finalAmount     Decimal?
  installments    Int?
  interest        Decimal?

  saleId Int @unique
  sale   Sale  @relation(fields: [saleId], references: [id])
}